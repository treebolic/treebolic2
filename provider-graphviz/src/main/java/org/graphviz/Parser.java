/* Generated By:JavaCC: Do not edit this line. Parser.java */
package org.graphviz;

import org.graphviz.objects.*;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Stack;

/**
 * The parser creates a list of Graph objects found in a Reader object.
 *
 * @version $Id: graphviz.jj,v 1.7 2006/04/05 22:38:29 Alexander Exp $
 */
public class Parser implements ParserConstants
{

	private final Stack<Graph> graphs = new Stack<>();

	private final ArrayList<Graph> graphGeneralList = new ArrayList<>();

	private final ArrayList<Node> nodeList = new ArrayList<>();

	// private final ArrayList<Graph> graphList = new ArrayList<>();

	/**
	 * Constructor
	 */
	public Parser()
	{
	}

	/**
	 * Returns the main Graphs found in the Reader stream
	 *
	 * @return the list of main Graphs
	 */
	public ArrayList<Graph> getGraphs()
	{
		return this.graphGeneralList;
	}

	/**
	 * Parses a Graphviz document
	 *
	 * @param in the Reader to parse
	 * @return normally true should be returned, if false then something in the JDK is broken...
	 * @throws ParseException parse exception
	 */
	public boolean parse(final Reader in) throws ParseException
	{
		// The Art of Unix Programming: If in doubt, use brute force!
		// Throw away line endings and spaces at the end of the file
		// that could be more effective the extending the grammar
		final StringBuffer sb = new StringBuffer();
		int i;
		try
		{
			i = in.read();
			while (i != -1)
			{
				sb.append((char) i);
				i = in.read();
			}
		}
		catch (final IOException e)
		{
			return false;
		}
		return parse(sb);
	}

	/**
	 * Parses a Graphviz document
	 *
	 * @param sb the StringBuffer containing the document
	 * @return normally true should be returned, if false then something in the JDK is broken...
	 * @throws ParseException parse exception
	 */
	@SuppressWarnings("SameReturnValue")
	public boolean parse(final StringBuffer sb) throws ParseException
	{
		final String is = sb.toString().trim();
		final StringReader ins = new StringReader(is);

		final Parser p = new Parser(ins);
		p.graphs(this.graphGeneralList);
		return true;
	}

	/**
	 * Creates a node, if the node wasn't used before if a node with the given id/label already exists, the existing node object is returned instead.
	 *
	 * @param g     the Graph
	 * @param id    the ID of the node
	 * @param label the Label of the node
	 * @return a Node object
	 */
	protected Node createNode(final Graph g, final String id, final String label)
	{
		final Id nid = new Id();
		nid.setId(id);
		nid.setLabel(label);
		Node n;
		Id tid;
		for (Node node : this.nodeList)
		{
			n = node;
			tid = n.getId();
			if (tid.isEqual(nid))
			{
				return n;
			}
		}
		n = new Node();
		n.setId(nid);
		this.nodeList.add(n);
		g.addNode(n);
		return n;
	}

	/**
	 * Check is node represents a cluster/subgraph and sets the flag in the node
	 *
	 * @param n the node to check
	 */
	@SuppressWarnings("EmptyMethod")
	protected void checkIfNodeIsSubgraph(@SuppressWarnings("unused") final Node n)
	{
		// check if node represents a cluster/subgraph
		/*
		for (Graph graph : this.graphList)
		{
			if (graph.getId().isEqual(n.getId()))
			{
				n.representsSubgraph(true);
				break;
			}
		}
		 */
	}

	/**
	 * Adds Graph attributes to the graph
	 *
	 * @param g  the graph
	 * @param ht the Hashtable containing the attributes
	 */
	protected void addAttributes(final Graph g, final Hashtable<String, String> ht)
	{
		final Enumeration<String> e = ht.keys();
		String key;
		while (e.hasMoreElements())
		{
			key = e.nextElement();
			g.addAttribute(key, ht.get(key));
		}
	}

	/**
	 * Adds Edge attributes to an Edge object
	 *
	 * @param edge the edge object
	 * @param ht   the Hashtable containing the attributes
	 */
	protected void addAttributes(final Edge edge, final Hashtable<String, String> ht)
	{
		final Enumeration<String> e = ht.keys();
		String key;
		while (e.hasMoreElements())
		{
			key = e.nextElement();
			edge.setAttribute(key, ht.get(key));
		}
	}

	/**
	 * Adds Node attributes to a Node object
	 *
	 * @param n  the Node object
	 * @param ht the Hashtable containing the attributes
	 */
	protected void addAttributes(final Node n, final Hashtable<String, String> ht)
	{
		final Enumeration<String> e = ht.keys();
		String key;
		while (e.hasMoreElements())
		{
			key = e.nextElement();
			n.setAttribute(key, ht.get(key));
		}
	}

	/**
	 * Production for all graph definitions in the stream
	 *
	 * @param gglist list
	 * @throws ParseException parse exception
	 */
	final public void graphs(final ArrayList<Graph> gglist) throws ParseException
	{
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case SPACE:
			case LF:
			case DIGRAPH:
			case GRAPH:
			case STRICT:
				label_1:
				while (true)
				{
					graph(gglist);
					switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
					{
						case SPACE:
						case LF:
						case DIGRAPH:
						case GRAPH:
						case STRICT:
							break;
						default:
							this.jj_la1[0] = this.jj_gen;
							break label_1;
					}
				}
				break;
			case 0:
				jj_consume_token(0);
				break;
			default:
				this.jj_la1[1] = this.jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	/**
	 * Production for a single graph
	 *
	 * @param gglist list
	 * @throws ParseException parse exception
	 */
	final public void graph(final ArrayList<Graph> gglist) throws ParseException
	{
		final Graph g = new Graph();
		Token st = null;
		Id id;
		this.graphs.push(g);
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case SPACE:
			case LF:
				label_2:
				while (true)
				{
					switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
					{
						case SPACE:
							jj_consume_token(ParserConstants.SPACE);
							break;
						case LF:
							jj_consume_token(ParserConstants.LF);
							break;
						default:
							this.jj_la1[2] = this.jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
					switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
					{
						case SPACE:
						case LF:
							break;
						default:
							this.jj_la1[3] = this.jj_gen;
							break label_2;
					}
				}
				break;
			default:
				this.jj_la1[4] = this.jj_gen;
		}
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == STRICT)
		{
			st = jj_consume_token(ParserConstants.STRICT);
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[5] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[6] = this.jj_gen;
		}
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case GRAPH:
				jj_consume_token(ParserConstants.GRAPH);
				while (true)
				{
					jj_consume_token(ParserConstants.SPACE);
					if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
					{
						this.jj_la1[7] = this.jj_gen;
						break;
					}
				}
				// graph or digraph keyword
				g.setType(Graph.UNDIRECTED);
				break;
			case DIGRAPH:
				jj_consume_token(ParserConstants.DIGRAPH);
				while (true)
				{
					jj_consume_token(ParserConstants.SPACE);
					if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
					{
						this.jj_la1[8] = this.jj_gen;
						break;
					}
				}
				g.setType(Graph.DIRECTED);
				break;
			default:
				this.jj_la1[9] = this.jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case STRING:
			case ID:
				id = id();
				g.setId(id);
				while (true)
				{
					if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
					{
						this.jj_la1[10] = this.jj_gen;
						break;
					}
					jj_consume_token(ParserConstants.SPACE);
				}
				break;
			default:
				this.jj_la1[11] = this.jj_gen;
		}
		jj_consume_token(ParserConstants.LBRACE);
		stmt_list();
		if (null != st)
		{
			g.setStrict(true);
		}
		gglist.add(g);
	}

	/**
	 * Production for the statements in the graph
	 *
	 * @throws ParseException parse exception
	 */
	final public void stmt_list() throws ParseException
	{
		if (jj_2_1(2147483647))
		{
			reallist();
		}
		else
		{
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case SPACE:
				case LBRACE:
				case SUBGRAPH:
				case NODE:
				case EDGE:
				case GRAPH:
				case STRING:
				case ID:
				case NUMBER:
					if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
					{
						while (true)
						{
							jj_consume_token(ParserConstants.SPACE);
							if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
							{
								this.jj_la1[12] = this.jj_gen;
								break;
							}
						}
					}
					else
					{
						this.jj_la1[13] = this.jj_gen;
					}
					stmt();
					jj_consume_token(ParserConstants.RBRACE);
					break;
				default:
					this.jj_la1[14] = this.jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
	}

	/**
	 * Production for more than one statement in a graph
	 *
	 * @throws ParseException parse exception
	 */
	final public void reallist() throws ParseException
	{
		label_8:
		while (true)
		{
			if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
			{
				while (true)
				{
					jj_consume_token(ParserConstants.SPACE);
					if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
					{
						this.jj_la1[15] = this.jj_gen;
						break;
					}
				}
			}
			else
			{
				this.jj_la1[16] = this.jj_gen;
			}
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case SEMI:
				case LF:
					lb();
					break;
				case LBRACE:
				case SUBGRAPH:
				case NODE:
				case EDGE:
				case GRAPH:
				case STRING:
				case ID:
				case NUMBER:
					stmt();
					lb();
					break;
				default:
					this.jj_la1[17] = this.jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case SEMI:
				case SPACE:
				case LBRACE:
				case LF:
				case SUBGRAPH:
				case NODE:
				case EDGE:
				case GRAPH:
				case STRING:
				case ID:
				case NUMBER:
					break;
				default:
					this.jj_la1[18] = this.jj_gen;
					break label_8;
			}
		}
		jj_consume_token(ParserConstants.RBRACE);
	}

	/**
	 * Production for the different types of statements
	 *
	 * @throws ParseException parse exception
	 */
	final public void stmt() throws ParseException
	{
		if (jj_2_2(2147483647))
		{
			graph_attrib_assign();
		}
		else if (jj_2_3(2147483647))
		{
			edge();
		}
		else if (jj_2_4(2147483647))
		{
			subgraph();
		}
		else if (jj_2_5(2147483647))
		{
			generic_attributes();
		}
		else if (jj_2_6(2147483647))
		{
			node_listing();
		}
		else
		{
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case STRING:
				case ID:
				case NUMBER:
					single_node();
					break;
				default:
					this.jj_la1[19] = this.jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
	}

	/**
	 * Production for the statement ending yes lb is misleading.
	 *
	 * @throws ParseException parse exception
	 */
	final public void lb() throws ParseException
	{
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case SEMI:
				jj_consume_token(ParserConstants.SEMI);
				break;
			case LF:
				jj_consume_token(ParserConstants.LF);
				break;
			default:
				this.jj_la1[20] = this.jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	/**
	 * Production for an edge The source is a single node, a list of nodes (matrix) or a subgraph. The target is a single node, a list of nodes (matrix) or a
	 * subgraph.
	 *
	 * @throws ParseException parse exception
	 */
	final public void edge() throws ParseException
	{
		ArrayList<PortNode> sources = new ArrayList<>();
		ArrayList<PortNode> targets = new ArrayList<>();
		Node n;
		PortNode pn;
		ArrayList<Node> nl;
		Hashtable<String, String> ht = null;
		final ArrayList<Edge> el = new ArrayList<>();
		final Graph g = this.graphs.peek();
		if (jj_2_7(2147483647))
		{
			n = subgraph();
			sources.add(new PortNode(n));
		}
		else if (jj_2_8(2147483647))
		{
			nl = matrix();
			if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
			{
				while (true)
				{
					jj_consume_token(ParserConstants.SPACE);
					if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
					{
						this.jj_la1[21] = this.jj_gen;
						break;
					}
				}
			}
			else
			{
				this.jj_la1[22] = this.jj_gen;
			}
			for (Node node : nl)
			{
				sources.add(new PortNode(node));
			}
		}
		else
		{
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case STRING:
				case ID:
				case NUMBER:
					pn = node_port();
					if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
					{
						while (true)
						{
							jj_consume_token(ParserConstants.SPACE);
							if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
							{
								this.jj_la1[23] = this.jj_gen;
								break;
							}
						}
					}
					else
					{
						this.jj_la1[24] = this.jj_gen;
					}
					sources.add(pn);
					break;
				default:
					this.jj_la1[25] = this.jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
		label_12:
		while (true)
		{
			edge_op();
			if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
			{
				while (true)
				{
					jj_consume_token(ParserConstants.SPACE);
					if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
					{
						this.jj_la1[26] = this.jj_gen;
						break;
					}
				}
			}
			else
			{
				this.jj_la1[27] = this.jj_gen;
			}
			if (jj_2_9(2147483647))
			{
				n = subgraph();
				targets.add(new PortNode(n));
			}
			else if (jj_2_10(2147483647))
			{
				nl = matrix();
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
				{
					while (true)
					{
						jj_consume_token(ParserConstants.SPACE);
						if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
						{
							this.jj_la1[28] = this.jj_gen;
							break;
						}
					}
				}
				else
				{
					this.jj_la1[29] = this.jj_gen;
				}
				for (Node node : nl)
				{
					targets.add(new PortNode(node));
				}
			}
			else
			{
				switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
				{
					case STRING:
					case ID:
					case NUMBER:
						pn = node_port();
						if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
						{
							while (true)
							{
								jj_consume_token(ParserConstants.SPACE);
								if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
								{
									this.jj_la1[30] = this.jj_gen;
									break;
								}
							}
						}
						else
						{
							this.jj_la1[31] = this.jj_gen;
						}
						targets.add(pn);
						break;
					default:
						this.jj_la1[32] = this.jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
			for (PortNode source : sources)
			{
				for (PortNode target : targets)
				{
					el.add(new Edge(source, target, g.getType()));
				}
			}
			sources = targets;
			targets = new ArrayList<>();
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case EDGE_DIRECTED:
				case EDGE_UNDIRECTED:
					break;
				default:
					this.jj_la1[33] = this.jj_gen;
					break label_12;
			}
		}
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == LBRACKET)
		{
			ht = attribute_list();
		}
		else
		{
			this.jj_la1[34] = this.jj_gen;
		}
		for (final Edge e : el)
		{
			if (ht != null)
			{
				final Enumeration<String> en = ht.keys();
				while (en.hasMoreElements())
				{
					final String key = en.nextElement();
					e.setAttribute(key, ht.get(key));
				}
			}
			g.addEdge(e);
		}
	}

	/**
	 * Production for the edge operator
	 *
	 * @throws ParseException parse exception
	 */
	final public void edge_op() throws ParseException
	{
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case EDGE_DIRECTED:
				jj_consume_token(ParserConstants.EDGE_DIRECTED);
				break;
			case EDGE_UNDIRECTED:
				jj_consume_token(ParserConstants.EDGE_UNDIRECTED);
				break;
			default:
				this.jj_la1[35] = this.jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	/**
	 * Production for a list of nodes
	 *
	 * @return array of nodes
	 * @throws ParseException parse exception
	 */
	final public ArrayList<Node> matrix() throws ParseException
	{
		final ArrayList<Node> nl = new ArrayList<>();
		Node n;
		jj_consume_token(ParserConstants.LBRACE);
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[36] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[37] = this.jj_gen;
		}
		label_17:
		while (true)
		{
			n = node();
			nl.add(n);
			if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
			{
				while (true)
				{
					jj_consume_token(ParserConstants.SPACE);
					if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
					{
						this.jj_la1[38] = this.jj_gen;
						break;
					}
				}
			}
			else
			{
				this.jj_la1[39] = this.jj_gen;
			}
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case STRING:
				case ID:
				case NUMBER:
					break;
				default:
					this.jj_la1[40] = this.jj_gen;
					break label_17;
			}
		}
		jj_consume_token(ParserConstants.RBRACE);
		return nl;
	}

	/**
	 * Production for generic graph/edge/node attributes edge [color=blue]
	 *
	 * @throws ParseException parse exception
	 */
	final public void generic_attributes() throws ParseException
	{
		final Graph g = this.graphs.peek();
		Hashtable<String, String> ht = null;
		Enumeration<String> e;
		String key;
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case GRAPH:
				jj_consume_token(ParserConstants.GRAPH);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
				{
					while (true)
					{
						jj_consume_token(ParserConstants.SPACE);
						if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
						{
							this.jj_la1[41] = this.jj_gen;
							break;
						}
					}
				}
				else
				{
					this.jj_la1[42] = this.jj_gen;
				}
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == LBRACKET)
				{
					ht = attribute_list();
				}
				else
				{
					this.jj_la1[43] = this.jj_gen;
				}
				assert ht != null;
				e = ht.keys();
				while (e.hasMoreElements())
				{
					key = e.nextElement();
					g.addGenericGraphAttribute(key, ht.get(key));
				}
				break;
			case EDGE:
				jj_consume_token(ParserConstants.EDGE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
				{
					while (true)
					{
						jj_consume_token(ParserConstants.SPACE);
						if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
						{
							this.jj_la1[44] = this.jj_gen;
							break;
						}
					}
				}
				else
				{
					this.jj_la1[45] = this.jj_gen;
				}
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == LBRACKET)
				{
					ht = attribute_list();
				}
				else
				{
					this.jj_la1[46] = this.jj_gen;
				}
				assert ht != null;
				e = ht.keys();
				while (e.hasMoreElements())
				{
					key = e.nextElement();
					g.addGenericEdgeAttribute(key, ht.get(key));
				}
				break;
			case NODE:
				jj_consume_token(ParserConstants.NODE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
				{
					while (true)
					{
						jj_consume_token(ParserConstants.SPACE);
						if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
						{
							this.jj_la1[47] = this.jj_gen;
							break;
						}
					}
				}
				else
				{
					this.jj_la1[48] = this.jj_gen;
				}
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == LBRACKET)
				{
					ht = attribute_list();
				}
				else
				{
					this.jj_la1[49] = this.jj_gen;
				}
				assert ht != null;
				e = ht.keys();
				while (e.hasMoreElements())
				{
					key = e.nextElement();
					g.addGenericNodeAttribute(key, ht.get(key));
				}
				break;
			default:
				this.jj_la1[50] = this.jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	/**
	 * Production for a subgraph
	 *
	 * @return node
	 * @throws ParseException parse exception
	 */
	final public Node subgraph() throws ParseException
	{
		Id id = null;
		final Graph g = new Graph();
		final Graph parent = this.graphs.peek();
		this.graphs.push(g);
		g.setType(parent.getType());
		g.setStrict(parent.isStrict());
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SUBGRAPH)
		{
			jj_consume_token(ParserConstants.SUBGRAPH);
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[51] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[52] = this.jj_gen;
		}
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case STRING:
			case ID:
				id = id();
				while (true)
				{
					if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
					{
						this.jj_la1[53] = this.jj_gen;
						break;
					}
					jj_consume_token(ParserConstants.SPACE);
				}
				g.setId(id);
				break;
			default:
				this.jj_la1[54] = this.jj_gen;
		}
		jj_consume_token(ParserConstants.LBRACE);
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == LF)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.LF);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != LF)
				{
					this.jj_la1[55] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[56] = this.jj_gen;
		}
		do
		{
			sg_stmt_list();
		}
		while (jj_2_11(2147483647));
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[57] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[58] = this.jj_gen;
		}
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case LBRACE:
			case SUBGRAPH:
			case NODE:
			case EDGE:
			case GRAPH:
			case STRING:
			case ID:
			case NUMBER:
				stmt();
				break;
			default:
				this.jj_la1[59] = this.jj_gen;
		}
		jj_consume_token(ParserConstants.RBRACE);
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[60] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[61] = this.jj_gen;
		}
		if (id == null)
		{
			g.setId(new Id());
		}
		this.graphs.pop();
		parent.addSubgraph(g);
		final Node n = createNode(parent, g.getId().getId(), g.getId().getLabel());
		n.representsSubgraph(true);
		return n;
	}

	/**
	 * Production for the statements in a subgraph
	 *
	 * @throws ParseException parse exception
	 */
	final public void sg_stmt_list() throws ParseException
	{
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[62] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[63] = this.jj_gen;
		}
		stmt();
		label_29:
		while (true)
		{
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case SEMI:
					jj_consume_token(ParserConstants.SEMI);
					break;
				case LF:
					jj_consume_token(ParserConstants.LF);
					break;
				default:
					this.jj_la1[64] = this.jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case SEMI:
				case LF:
					break;
				default:
					this.jj_la1[65] = this.jj_gen;
					break label_29;
			}
		}
	}

	/**
	 * Production for graph layout attributes (label="test")
	 *
	 * @throws ParseException parse exception
	 */
	final public void graph_attrib_assign() throws ParseException
	{
		Token id;
		String value;
		id = jj_consume_token(ParserConstants.ID);
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[66] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[67] = this.jj_gen;
		}
		jj_consume_token(ParserConstants.EQUAL);
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[68] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[69] = this.jj_gen;
		}
		value = value();
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[70] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[71] = this.jj_gen;
		}
		this.graphs.peek().addAttribute(id.image, value);
	}

	/**
	 * Production for Node having port information (node:"e")
	 *
	 * @return node port
	 * @throws ParseException parse exception
	 */
	final public PortNode node_port() throws ParseException
	{
		Node n;
		Id port = null;
		n = node();
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == DOUBLE)
		{
			jj_consume_token(ParserConstants.DOUBLE);
			port = id();
		}
		else
		{
			this.jj_la1[72] = this.jj_gen;
		}
		final PortNode pn = new PortNode();
		pn.setNode(n);
		if (port != null)
		{
			if (!port.getId().equals(""))
			{
				pn.setPort(port.getId());
			}
			else if (!port.getLabel().equals(""))
			{
				pn.setPort(port.getLabel());
			}
		}
		return pn;
	}

	/**
	 * Production for listing of nodes (node1 node2 [color=grey];)
	 *
	 * @throws ParseException parse exception
	 */
	final public void node_listing() throws ParseException
	{
		Node n;
		final ArrayList<Node> nl = new ArrayList<>();
		Hashtable<String, String> ht;
		n = node();
		nl.add(n);
		while (true)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[73] = this.jj_gen;
					break;
				}
			}
			n = node();
			nl.add(n);
			if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
			{
				this.jj_la1[74] = this.jj_gen;
				break;
			}
		}
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == LBRACKET)
		{
			ht = attribute_list();
			for (Node node : nl)
			{
				n = node;
				addAttributes(n, ht);
			}
		}
		else
		{
			this.jj_la1[75] = this.jj_gen;
		}
	}

	/**
	 * Production for a single node on a line
	 *
	 * @throws ParseException parse exception
	 */
	final public void single_node() throws ParseException
	{
		Node n;
		Hashtable<String, String> ht;
		n = node();
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[76] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[77] = this.jj_gen;
		}
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == LBRACKET)
		{
			ht = attribute_list();
			addAttributes(n, ht);
		}
		else
		{
			this.jj_la1[78] = this.jj_gen;
		}
	}

	/**
	 * Production for an attribute list
	 *
	 * @return attribute hash table
	 * @throws ParseException parse exception
	 */
	final public Hashtable<String, String> attribute_list() throws ParseException
	{
		final Hashtable<String, String> ht = new Hashtable<>();
		String[] kv;
		jj_consume_token(ParserConstants.LBRACKET);
		label_36:
		while (true)
		{
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case SPACE:
				case LF:
					break;
				default:
					this.jj_la1[79] = this.jj_gen;
					break label_36;
			}
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case SPACE:
					jj_consume_token(ParserConstants.SPACE);
					break;
				case LF:
					jj_consume_token(ParserConstants.LF);
					break;
				default:
					this.jj_la1[80] = this.jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == ID)
		{
			while (true)
			{
				kv = attribute();
				ht.put(kv[0], kv[1]);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != ID)
				{
					this.jj_la1[81] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[82] = this.jj_gen;
		}
		jj_consume_token(ParserConstants.RBRACKET);
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[83] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[84] = this.jj_gen;
		}
		{
			return ht;
		}
	}

	/**
	 * Production for an attribute in an attribute list
	 *
	 * @return attribute array
	 * @throws ParseException parse exception
	 */
	final public String[] attribute() throws ParseException
	{
		Token id;
		final String[] kv = new String[2];
		kv[0] = "";
		kv[1] = "";
		id = jj_consume_token(ParserConstants.ID);
		if (jj_2_12(2147483647))
		{
			kv[1] = attrib_value();
		}

		label_39:
		while (true)
		{
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case COMMA:
				case SPACE:
				case LF:
					break;
				default:
					this.jj_la1[85] = this.jj_gen;
					break label_39;
			}
			switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
			{
				case SPACE:
					jj_consume_token(ParserConstants.SPACE);
					break;
				case COMMA:
					jj_consume_token(ParserConstants.COMMA);
					break;
				case LF:
					jj_consume_token(ParserConstants.LF);
					break;
				default:
					this.jj_la1[86] = this.jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		}
		kv[0] = id.image;
		{
			return kv;
		}
	}

	/**
	 * Production for the value of an attribute assignment
	 *
	 * @return attribute value
	 * @throws ParseException parse exception
	 */
	final public String attrib_value() throws ParseException
	{
		String v;
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[87] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[88] = this.jj_gen;
		}
		jj_consume_token(ParserConstants.EQUAL);
		if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) == SPACE)
		{
			while (true)
			{
				jj_consume_token(ParserConstants.SPACE);
				if ((this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk) != SPACE)
				{
					this.jj_la1[89] = this.jj_gen;
					break;
				}
			}
		}
		else
		{
			this.jj_la1[90] = this.jj_gen;
		}
		v = value();
		{
			return v;
		}
	}

	/**
	 * Production for a single node
	 *
	 * @return node
	 * @throws ParseException parse exception
	 */
	final public Node node() throws ParseException
	{
		Token t;
		Node n;
		final Graph c = this.graphs.peek();
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case ID:
			case NUMBER:
			{
				switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
				{
					case ID:
						t = jj_consume_token(ParserConstants.ID);
						break;
					case NUMBER:
						t = jj_consume_token(ParserConstants.NUMBER);
						break;
					default:
						this.jj_la1[91] = this.jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
				n = createNode(c, t.image, "");
				checkIfNodeIsSubgraph(n);
				return n;
			}

			case STRING:
			{
				t = jj_consume_token(ParserConstants.STRING);
				n = createNode(c, "", t.image.substring(1, t.image.length() - 1));
				checkIfNodeIsSubgraph(n);
				return n;
			}

			default:
				this.jj_la1[92] = this.jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	/**
	 * Production for single id element
	 *
	 * @return id
	 * @throws ParseException parse exception
	 */
	final public Id id() throws ParseException
	{
		Token id;
		Token text;
		final Id i = new Id();
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case ID:
			{
				id = jj_consume_token(ParserConstants.ID);
				i.setId(id.image);
				return i;
			}
			case STRING:
			{
				text = jj_consume_token(ParserConstants.STRING);
				if (text != null)
				{
					i.setLabel(text.image.substring(1, text.image.length() - 1));
				}
				return i;
			}
			default:
				this.jj_la1[93] = this.jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	/**
	 * Production for a value
	 *
	 * @return value
	 * @throws ParseException parse exception
	 */
	final public String value() throws ParseException
	{
		Token text;
		switch (this.jj_ntk == -1 ? jj_ntk() : this.jj_ntk)
		{
			case ID:
			{
				text = jj_consume_token(ParserConstants.ID);
				return text.image;
			}
			case STRING:
			{
				text = jj_consume_token(ParserConstants.STRING);
				return text.image.substring(1, text.image.length() - 1);
			}
			case NUMBER:
			{
				text = jj_consume_token(ParserConstants.NUMBER);
				return text.image;
			}
			default:
				this.jj_la1[94] = this.jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	private boolean jj_2_1(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_1();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(0, xla);
		}
	}

	private boolean jj_2_2(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_2();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(1, xla);
		}
	}

	private boolean jj_2_3(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_3();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(2, xla);
		}
	}

	private boolean jj_2_4(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_4();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(3, xla);
		}
	}

	private boolean jj_2_5(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_5();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(4, xla);
		}
	}

	private boolean jj_2_6(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_6();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(5, xla);
		}
	}

	private boolean jj_2_7(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_7();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(6, xla);
		}
	}

	private boolean jj_2_8(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_8();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(7, xla);
		}
	}

	private boolean jj_2_9(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_9();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(8, xla);
		}
	}

	private boolean jj_2_10(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_10();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(9, xla);
		}
	}

	private boolean jj_2_11(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_11();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(10, xla);
		}
	}

	private boolean jj_2_12(@SuppressWarnings("SameParameterValue") final int xla)
	{
		this.jj_la = xla;
		this.jj_lastpos = this.jj_scanpos = this.token;
		try
		{
			return !jj_3_12();
		}
		catch (final LookaheadSuccess ls)
		{
			return true;
		}
		finally
		{
			jj_save(11, xla);
		}
	}

	private boolean jj_3R_55()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_106()
	{
		return jj_3R_43();
	}

	private boolean jj_3R_77()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_106())
		{
			this.jj_scanpos = xsp;
			if (jj_3R_107())
			{
				this.jj_scanpos = xsp;
				if (jj_3R_108())
				{
					this.jj_scanpos = xsp;
					if (jj_3R_109())
					{
						this.jj_scanpos = xsp;
						if (jj_3R_110())
						{
							this.jj_scanpos = xsp;
							return jj_3R_111();
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_43()
	{
		if (jj_scan_token(ParserConstants.ID))
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_52())
		{
			this.jj_scanpos = xsp;
		}
		if (jj_scan_token(ParserConstants.EQUAL))
		{
			return true;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_53())
		{
			this.jj_scanpos = xsp;
		}
		if (jj_3R_54())
		{
			return true;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_55())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_78()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_scan_token(11))
		{
			this.jj_scanpos = xsp;
			return jj_scan_token(20);
		}
		return false;
	}

	private boolean jj_3R_42()
	{
		Token xsp;
		if (jj_3R_51())
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_3R_51())
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return jj_scan_token(ParserConstants.RBRACE);
	}

	private boolean jj_3R_76()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_49()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_76())
		{
			this.jj_scanpos = xsp;
		}
		if (jj_3R_77())
		{
			return true;
		}
		if (jj_3R_78())
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_3R_78())
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_1()
	{
		return jj_3R_42();
	}

	private boolean jj_3_11()
	{
		return jj_3R_49();
	}

	private boolean jj_3R_64()
	{
		return jj_3R_49();
	}

	private boolean jj_3R_67()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_65()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_66()
	{
		return jj_3R_77();
	}

	private boolean jj_3R_63()
	{
		Token xsp;
		if (jj_scan_token(20))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(20))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_62()
	{
		if (jj_3R_96())
		{
			return true;
		}
		Token xsp;
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_102()
	{
		return jj_3R_95();
	}

	private boolean jj_3R_61()
	{
		if (jj_scan_token(ParserConstants.SUBGRAPH))
		{
			return true;
		}
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_86()
	{
		return jj_scan_token(ParserConstants.NUMBER);
	}

	private boolean jj_3R_45()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_61())
		{
			this.jj_scanpos = xsp;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_62())
		{
			this.jj_scanpos = xsp;
		}
		if (jj_scan_token(ParserConstants.LBRACE))
		{
			return true;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_63())
		{
			this.jj_scanpos = xsp;
		}
		if (jj_3R_64())
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_3R_64())
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		if (jj_3R_65())
		{
			this.jj_scanpos = xsp;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_66())
		{
			this.jj_scanpos = xsp;
		}
		if (jj_scan_token(ParserConstants.RBRACE))
		{
			return true;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_67())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_85()
	{
		return jj_scan_token(ParserConstants.STRING);
	}

	private boolean jj_3R_54()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_84())
		{
			this.jj_scanpos = xsp;
			if (jj_3R_85())
			{
				this.jj_scanpos = xsp;
				return jj_3R_86();
			}
		}
		return false;
	}

	private boolean jj_3R_84()
	{
		return jj_scan_token(ParserConstants.ID);
	}

	private boolean jj_3R_100()
	{
		return jj_3R_95();
	}

	private boolean jj_3R_101()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_98()
	{
		return jj_3R_95();
	}

	private boolean jj_3R_120()
	{
		return jj_scan_token(ParserConstants.STRING);
	}

	private boolean jj_3R_119()
	{
		return jj_scan_token(ParserConstants.ID);
	}

	private boolean jj_3R_96()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_119())
		{
			this.jj_scanpos = xsp;
			return jj_3R_120();
		}
		return false;
	}

	private boolean jj_3R_99()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_70()
	{
		if (jj_scan_token(ParserConstants.NODE))
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_101())
		{
			this.jj_scanpos = xsp;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_102())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_105()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_97()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_69()
	{
		if (jj_scan_token(ParserConstants.EDGE))
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_99())
		{
			this.jj_scanpos = xsp;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_100())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_104()
	{
		return jj_scan_token(ParserConstants.STRING);
	}

	private boolean jj_3R_80()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_46()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_68())
		{
			this.jj_scanpos = xsp;
			if (jj_3R_69())
			{
				this.jj_scanpos = xsp;
				return jj_3R_70();
			}
		}
		return false;
	}

	private boolean jj_3R_68()
	{
		if (jj_scan_token(ParserConstants.GRAPH))
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_97())
		{
			this.jj_scanpos = xsp;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_98())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_103()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_scan_token(28))
		{
			this.jj_scanpos = xsp;
			return jj_scan_token(29);
		}
		return false;
	}

	private boolean jj_3R_71()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_103())
		{
			this.jj_scanpos = xsp;
			return jj_3R_104();
		}
		return false;
	}

	private boolean jj_3R_75()
	{
		if (jj_3R_71())
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_105())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_74()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_79()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_50()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_79())
		{
			this.jj_scanpos = xsp;
		}
		if (jj_scan_token(ParserConstants.EQUAL))
		{
			return true;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_80())
		{
			this.jj_scanpos = xsp;
		}
		return jj_3R_54();
	}

	private boolean jj_3R_48()
	{
		if (jj_scan_token(ParserConstants.LBRACE))
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_74())
		{
			this.jj_scanpos = xsp;
		}
		if (jj_3R_75())
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_3R_75())
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return jj_scan_token(ParserConstants.RBRACE);
	}

	private boolean jj_3_12()
	{
		return jj_3R_50();
	}

	private boolean jj_3R_127()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_scan_token(15))
		{
			this.jj_scanpos = xsp;
			if (jj_scan_token(13))
			{
				this.jj_scanpos = xsp;
				return jj_scan_token(20);
			}
		}
		return false;
	}

	private boolean jj_3R_114()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_126()
	{
		return jj_3R_50();
	}

	private boolean jj_3R_90()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_scan_token(9))
		{
			this.jj_scanpos = xsp;
			return jj_scan_token(10);
		}
		return false;
	}

	private boolean jj_3R_125()
	{
		if (jj_scan_token(ParserConstants.ID))
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_126())
		{
			this.jj_scanpos = xsp;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_3R_127())
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_115()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_87()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_118()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_122()
	{
		return jj_3R_125();
	}

	private boolean jj_3R_117()
	{
		Token xsp;
		if (jj_3R_122())
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_3R_122())
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_116()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_scan_token(15))
		{
			this.jj_scanpos = xsp;
			return jj_scan_token(20);
		}
		return false;
	}

	private boolean jj_3R_60()
	{
		return jj_3R_95();
	}

	private boolean jj_3R_95()
	{
		if (jj_scan_token(ParserConstants.LBRACKET))
		{
			return true;
		}
		Token xsp;
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_3R_116())
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		if (jj_3R_117())
		{
			this.jj_scanpos = xsp;
		}
		if (jj_scan_token(ParserConstants.RBRACKET))
		{
			return true;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_118())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3_10()
	{
		return jj_3R_48();
	}

	private boolean jj_3R_89()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_123()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_9()
	{
		return jj_3R_45();
	}

	private boolean jj_3R_91()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_94()
	{
		if (jj_3R_88())
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_115())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_72()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return jj_3R_71();
	}

	private boolean jj_3R_124()
	{
		return jj_3R_95();
	}

	private boolean jj_3R_93()
	{
		if (jj_3R_48())
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_114())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_121()
	{
		if (jj_3R_71())
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_123())
		{
			this.jj_scanpos = xsp;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_124())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_92()
	{
		return jj_3R_45();
	}

	private boolean jj_3_8()
	{
		return jj_3R_48();
	}

	private boolean jj_3R_59()
	{
		if (jj_3R_90())
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_91())
		{
			this.jj_scanpos = xsp;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_92())
		{
			this.jj_scanpos = xsp;
			if (jj_3R_93())
			{
				this.jj_scanpos = xsp;
				return jj_3R_94();
			}
		}
		return false;
	}

	private boolean jj_3R_58()
	{
		if (jj_3R_88())
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_89())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3_7()
	{
		return jj_3R_45();
	}

	private boolean jj_3R_73()
	{
		return jj_3R_95();
	}

	private boolean jj_3R_57()
	{
		if (jj_3R_48())
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_87())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_56()
	{
		return jj_3R_45();
	}

	private boolean jj_3R_47()
	{
		if (jj_3R_71())
		{
			return true;
		}
		Token xsp;
		if (jj_3R_72())
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_3R_72())
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		if (jj_3R_73())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_44()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_56())
		{
			this.jj_scanpos = xsp;
			if (jj_3R_57())
			{
				this.jj_scanpos = xsp;
				if (jj_3R_58())
				{
					return true;
				}
			}
		}
		if (jj_3R_59())
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_3R_59())
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		if (jj_3R_60())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_53()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_113()
	{
		if (jj_scan_token(ParserConstants.DOUBLE))
		{
			return true;
		}
		return jj_3R_96();
	}

	private boolean jj_3_6()
	{
		return jj_3R_47();
	}

	private boolean jj_3_5()
	{
		return jj_3R_46();
	}

	private boolean jj_3R_112()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_scan_token(11))
		{
			this.jj_scanpos = xsp;
			return jj_scan_token(20);
		}
		return false;
	}

	private boolean jj_3_4()
	{
		return jj_3R_45();
	}

	private boolean jj_3_3()
	{
		return jj_3R_44();
	}

	private boolean jj_3R_88()
	{
		if (jj_3R_71())
		{
			return true;
		}
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_113())
		{
			this.jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3_2()
	{
		return jj_3R_43();
	}

	private boolean jj_3R_52()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_111()
	{
		return jj_3R_121();
	}

	private boolean jj_3R_83()
	{
		if (jj_3R_77())
		{
			return true;
		}
		return jj_3R_112();
	}

	private boolean jj_3R_110()
	{
		return jj_3R_47();
	}

	private boolean jj_3R_109()
	{
		return jj_3R_46();
	}

	private boolean jj_3R_82()
	{
		return jj_3R_112();
	}

	private boolean jj_3R_108()
	{
		return jj_3R_45();
	}

	private boolean jj_3R_107()
	{
		return jj_3R_44();
	}

	private boolean jj_3R_81()
	{
		Token xsp;
		if (jj_scan_token(15))
		{
			return true;
		}
		while (true)
		{
			xsp = this.jj_scanpos;
			if (jj_scan_token(15))
			{
				this.jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_51()
	{
		Token xsp;
		xsp = this.jj_scanpos;
		if (jj_3R_81())
		{
			this.jj_scanpos = xsp;
		}
		xsp = this.jj_scanpos;
		if (jj_3R_82())
		{
			this.jj_scanpos = xsp;
			return jj_3R_83();
		}
		return false;
	}

	/**
	 * Generated Token Manager.
	 */
	public ParserTokenManager token_source;

	JavaCharStream jj_input_stream;

	/**
	 * Current token.
	 */
	public Token token;

	/**
	 * Next token.
	 */
	public Token jj_nt;

	private int jj_ntk;

	private Token jj_scanpos, jj_lastpos;

	private int jj_la;

	private int jj_gen;

	final private int[] jj_la1 = new int[95];

	static private int[] jj_la1_0;

	static
	{
		Parser.jj_la1_init_0();
	}

	private static void jj_la1_init_0()
	{
		Parser.jj_la1_0 = new int[]{0x7108000, 0x7108001, 0x108000, 0x108000, 0x108000, 0x8000, 0x4000000, 0x8000, 0x8000, 0x3000000, 0x8000, 0x18000000, 0x8000, 0x8000, 0x3ae48000, 0x8000, 0x8000, 0x3af40800, 0x3af48800, 0x38000000, 0x100800, 0x8000, 0x8000, 0x8000, 0x8000, 0x38000000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x38000000, 0x600, 0x10000, 0x600, 0x8000, 0x8000, 0x8000, 0x8000, 0x38000000, 0x8000, 0x8000, 0x10000, 0x8000, 0x8000, 0x10000, 0x8000, 0x8000, 0x10000, 0x2c00000, 0x8000, 0x200000, 0x8000, 0x18000000, 0x100000, 0x100000, 0x8000, 0x8000, 0x3ae40000, 0x8000, 0x8000, 0x8000, 0x8000, 0x100800, 0x100800, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x1000, 0x8000, 0x8000, 0x10000, 0x8000, 0x8000, 0x10000, 0x108000, 0x108000, 0x10000000, 0x10000000, 0x8000, 0x8000, 0x10a000, 0x10a000, 0x8000, 0x8000, 0x8000, 0x8000, 0x30000000, 0x38000000, 0x18000000, 0x38000000,};
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[12];

	private boolean jj_rescan = false;

	private int jj_gc = 0;

	/**
	 * Constructor with InputStream.
	 *
	 * @param stream stream
	 */
	public Parser(final java.io.InputStream stream)
	{
		this(stream, null);
	}

	/**
	 * Constructor with InputStream and supplied encoding
	 *
	 * @param stream   stream
	 * @param encoding encoding
	 */
	public Parser(final java.io.InputStream stream, final String encoding)
	{
		try
		{
			this.jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
		}
		catch (final java.io.UnsupportedEncodingException e)
		{
			throw new RuntimeException(e);
		}
		this.token_source = new ParserTokenManager(this.jj_input_stream);
		this.token = new Token();
		this.jj_ntk = -1;
		this.jj_gen = 0;
		for (int i = 0; i < 95; i++)
		{
			this.jj_la1[i] = -1;
		}
		for (int i = 0; i < this.jj_2_rtns.length; i++)
		{
			this.jj_2_rtns[i] = new JJCalls();
		}
	}

	/**
	 * Reinitialise.
	 *
	 * @param stream stream
	 */
	public void ReInit(final java.io.InputStream stream)
	{
		ReInit(stream, null);
	}

	/**
	 * Reinitialise.
	 *
	 * @param stream   stream
	 * @param encoding encoding
	 */
	public void ReInit(final java.io.InputStream stream, final String encoding)
	{
		try
		{
			this.jj_input_stream.ReInit(stream, encoding, 1, 1);
		}
		catch (final java.io.UnsupportedEncodingException e)
		{
			throw new RuntimeException(e);
		}
		this.token_source.ReInit(this.jj_input_stream);
		this.token = new Token();
		this.jj_ntk = -1;
		this.jj_gen = 0;
		for (int i = 0; i < 95; i++)
		{
			this.jj_la1[i] = -1;
		}
		for (int i = 0; i < this.jj_2_rtns.length; i++)
		{
			this.jj_2_rtns[i] = new JJCalls();
		}
	}

	/**
	 * Constructor.
	 *
	 * @param stream reader stream
	 */
	public Parser(final Reader stream)
	{
		this.jj_input_stream = new JavaCharStream(stream, 1, 1);
		this.token_source = new ParserTokenManager(this.jj_input_stream);
		this.token = new Token();
		this.jj_ntk = -1;
		this.jj_gen = 0;
		for (int i = 0; i < 95; i++)
		{
			this.jj_la1[i] = -1;
		}
		for (int i = 0; i < this.jj_2_rtns.length; i++)
		{
			this.jj_2_rtns[i] = new JJCalls();
		}
	}

	/**
	 * Reinitialise.
	 *
	 * @param stream reader stream
	 */
	public void ReInit(final Reader stream)
	{
		this.jj_input_stream.ReInit(stream, 1, 1);
		this.token_source.ReInit(this.jj_input_stream);
		this.token = new Token();
		this.jj_ntk = -1;
		this.jj_gen = 0;
		for (int i = 0; i < 95; i++)
		{
			this.jj_la1[i] = -1;
		}
		for (int i = 0; i < this.jj_2_rtns.length; i++)
		{
			this.jj_2_rtns[i] = new JJCalls();
		}
	}

	/**
	 * Constructor with generated Token Manager.
	 *
	 * @param tm token manager
	 */
	public Parser(final ParserTokenManager tm)
	{
		this.token_source = tm;
		this.token = new Token();
		this.jj_ntk = -1;
		this.jj_gen = 0;
		for (int i = 0; i < 95; i++)
		{
			this.jj_la1[i] = -1;
		}
		for (int i = 0; i < this.jj_2_rtns.length; i++)
		{
			this.jj_2_rtns[i] = new JJCalls();
		}
	}

	/**
	 * Reinitialise.
	 *
	 * @param tm token manager
	 */
	public void ReInit(final ParserTokenManager tm)
	{
		this.token_source = tm;
		this.token = new Token();
		this.jj_ntk = -1;
		this.jj_gen = 0;
		for (int i = 0; i < 95; i++)
		{
			this.jj_la1[i] = -1;
		}
		for (int i = 0; i < this.jj_2_rtns.length; i++)
		{
			this.jj_2_rtns[i] = new JJCalls();
		}
	}

	private Token jj_consume_token(final int kind) throws ParseException
	{
		Token oldToken;
		if ((oldToken = this.token).next != null)
		{
			this.token = this.token.next;
		}
		else
		{
			this.token = this.token.next = this.token_source.getNextToken();
		}
		this.jj_ntk = -1;
		if (this.token.kind == kind)
		{
			this.jj_gen++;
			if (++this.jj_gc > 100)
			{
				this.jj_gc = 0;
				for (final JJCalls thisJj_2_rtn : this.jj_2_rtns)
				{
					JJCalls c = thisJj_2_rtn;
					while (c != null)
					{
						if (c.gen < this.jj_gen)
						{
							c.first = null;
						}
						c = c.next;
					}
				}
			}
			return this.token;
		}
		this.token = oldToken;
		this.jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends Error
	{

		/**
		 *
		 */
		private static final long serialVersionUID = -1529788647814754194L;
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean jj_scan_token(final int kind)
	{
		if (this.jj_scanpos == this.jj_lastpos)
		{
			this.jj_la--;
			if (this.jj_scanpos.next == null)
			{
				this.jj_lastpos = this.jj_scanpos = this.jj_scanpos.next = this.token_source.getNextToken();
			}
			else
			{
				this.jj_lastpos = this.jj_scanpos = this.jj_scanpos.next;
			}
		}
		else
		{
			this.jj_scanpos = this.jj_scanpos.next;
		}
		if (this.jj_rescan)
		{
			int i = 0;
			Token tok = this.token;
			while (tok != null && tok != this.jj_scanpos)
			{
				i++;
				tok = tok.next;
			}
			if (tok != null)
			{
				jj_add_error_token(kind, i);
			}
		}
		if (this.jj_scanpos.kind != kind)
		{
			return true;
		}
		if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos)
		{
			throw this.jj_ls;
		}
		return false;
	}

	/**
	 * Get the next Token.
	 *
	 * @return next token
	 */
	final public Token getNextToken()
	{
		if (this.token.next != null)
		{
			this.token = this.token.next;
		}
		else
		{
			this.token = this.token.next = this.token_source.getNextToken();
		}
		this.jj_ntk = -1;
		this.jj_gen++;
		return this.token;
	}

	/**
	 * Get the specific Token.
	 *
	 * @param index token index
	 * @return token at index
	 */
	final public Token getToken(final int index)
	{
		Token t = this.token;
		for (int i = 0; i < index; i++)
		{
			if (t.next != null)
			{
				t = t.next;
			}
			else
			{
				t = t.next = this.token_source.getNextToken();
			}
		}
		return t;
	}

	private int jj_ntk()
	{
		if ((this.jj_nt = this.token.next) == null)
		{
			return this.jj_ntk = (this.token.next = this.token_source.getNextToken()).kind;
		}
		else
		{
			return this.jj_ntk = this.jj_nt.kind;
		}
	}

	private final java.util.List<int[]> jj_expentries = new ArrayList<>();

	private int[] jj_expentry;

	private int jj_kind = -1;

	private final int[] jj_lasttokens = new int[100];

	private int jj_endpos;

	private void jj_add_error_token(final int kind, final int pos)
	{
		if (pos >= 100)
		{
			return;
		}
		if (pos == this.jj_endpos + 1)
		{
			this.jj_lasttokens[this.jj_endpos++] = kind;
		}
		else if (this.jj_endpos != 0)
		{
			this.jj_expentry = new int[this.jj_endpos];
			System.arraycopy(this.jj_lasttokens, 0, this.jj_expentry, 0, this.jj_endpos);
			boolean exists = false;
			for (final Object name : this.jj_expentries)
			{
				exists = true;
				final int[] oldentry = (int[]) name;
				if (oldentry.length == this.jj_expentry.length)
				{
					for (int i = 0; i < this.jj_expentry.length; i++)
					{
						if (oldentry[i] != this.jj_expentry[i])
						{
							exists = false;
							break;
						}
					}
					if (exists)
					{
						break;
					}
				}
			}
			if (!exists)
			{
				this.jj_expentries.add(this.jj_expentry);
			}
			if (pos != 0)
			{
				this.jj_lasttokens[(this.jj_endpos = pos) - 1] = kind;
			}
		}
	}

	/**
	 * Generate ParseException.
	 *
	 * @return parse exception
	 */
	public ParseException generateParseException()
	{
		this.jj_expentries.clear();
		final boolean[] la1tokens = new boolean[30];
		if (this.jj_kind >= 0)
		{
			la1tokens[this.jj_kind] = true;
			this.jj_kind = -1;
		}
		for (int i = 0; i < 95; i++)
		{
			if (this.jj_la1[i] == this.jj_gen)
			{
				for (int j = 0; j < 32; j++)
				{
					if ((Parser.jj_la1_0[i] & 1 << j) != 0)
					{
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 30; i++)
		{
			if (la1tokens[i])
			{
				this.jj_expentry = new int[1];
				this.jj_expentry[0] = i;
				this.jj_expentries.add(this.jj_expentry);
			}
		}
		this.jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		final int[][] exptokseq = new int[this.jj_expentries.size()][];
		for (int i = 0; i < this.jj_expentries.size(); i++)
		{
			exptokseq[i] = this.jj_expentries.get(i);
		}
		return new ParseException(this.token, exptokseq, ParserConstants.tokenImage);
	}

	private void jj_rescan_token()
	{
		this.jj_rescan = true;
		for (int i = 0; i < 12; i++)
		{
			try
			{
				JJCalls p = this.jj_2_rtns[i];
				do
				{
					if (p.gen > this.jj_gen)
					{
						this.jj_la = p.arg;
						this.jj_lastpos = this.jj_scanpos = p.first;
						switch (i)
						{
							case 0:
								jj_3_1();
								break;
							case 1:
								jj_3_2();
								break;
							case 2:
								jj_3_3();
								break;
							case 3:
								jj_3_4();
								break;
							case 4:
								jj_3_5();
								break;
							case 5:
								jj_3_6();
								break;
							case 6:
								jj_3_7();
								break;
							case 7:
								jj_3_8();
								break;
							case 8:
								jj_3_9();
								break;
							case 9:
								jj_3_10();
								break;
							case 10:
								jj_3_11();
								break;
							case 11:
								jj_3_12();
								break;
						}
					}
					p = p.next;
				}
				while (p != null);
			}
			catch (final LookaheadSuccess ignored)
			{
			}
		}
		this.jj_rescan = false;
	}

	private void jj_save(final int index, final int xla)
	{
		JJCalls p = this.jj_2_rtns[index];
		while (p.gen > this.jj_gen)
		{
			if (p.next == null)
			{
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = this.jj_gen + xla - this.jj_la;
		p.first = this.token;
		p.arg = xla;
	}

	static final class JJCalls
	{
		int gen;

		Token first;

		int arg;

		JJCalls next;
	}

}
